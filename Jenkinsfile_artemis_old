pipeline {
    agent any
    parameters {
        string(name: 'artemis_repo', defaultValue: 'CanalTP/artemis', description: 'Artemis gihub repository')
        string(name: 'artemis_branch', defaultValue: 'master', description: 'Artemis branch to checkout')
        string(name: 'artemis_ref_repo', defaultValue: 'CanalTP/artemis_references', description: 'Artemis gihub repository')
        string(name: 'artemis_ref_branch', defaultValue: 'master', description: 'Artemis branch to checkout')
        string(name: 'docker_kirin_repo', defaultValue: 'CanalTP/docker_kirin', description: 'Artemis_data github repository ')
        string(name: 'docker_kirin_branch', defaultValue: 'master', description: 'Artemis_data branch to checkout')
        string(name: 'pytest_args', defaultValue: '', description: """Expression that matchs test names to be run. This is passed to 'pytest -k <pytest_args>'

cf. http://doc.pytest.org/en/latest/example/markers.html#using-k-expr-to-select-tests-based-on-their-name """)
    }
    options {
        throttleJobProperty(
            categories: ['artemis'],
            throttleEnabled: true,
            throttleOption: 'category'
        )
        buildDiscarder(
            logRotator(numToKeepStr: '30')
        )
        ansiColor('xterm')
    }
    stages {
        stage('Pull data') {
            steps {
                sshagent(credentials : ['jenkins-core-ssh']) {
                    sh """
                    ssh -o StrictHostKeyChecking=no root@par-vm14.srv.canaltp.fr " \
                    rm -rf ./artemis \
                    && git clone git@github.com:${params.artemis_repo}.git --branch ${params.artemis_branch} ./artemis \
                    && git clone git@github.com:${params.artemis_ref_repo}.git --branch ${params.artemis_ref_branch} ./artemis/reference \
                    "
                    """
                    }
            }
        }
        stage('Launch artemis') {
            steps {
                sshagent(credentials : ['jenkins-core-ssh']) {
                    sh '''ssh -tt -o StrictHostKeyChecking=no root@par-vm14.srv.canaltp.fr "cd artemis  && python -m py.test -s artemis/tests -k '$pytest_args' --junitxml=artemis.xml -s -vv -l --tb=long" '''
                }
            }
        }
    }
    post {
        always {
            sshagent(credentials : ['jenkins-core-ssh']) {
                    sh 'rm -rf artemis'
                    sh 'mkdir -p artemis/output '
                    sh '''ssh -o StrictHostKeyChecking=no root@par-vm14.srv.canaltp.fr zip -rqo artemis/output/results.zip artemis/output/*'''
                    sh '''scp -r -o StrictHostKeyChecking=no root@par-vm14.srv.canaltp.fr:artemis/output/results.zip artemis/output/  '''
                    sh '''scp -o StrictHostKeyChecking=no root@par-vm14.srv.canaltp.fr:artemis/*.xml artemis/  '''
            }
            archiveArtifacts artifacts: 'artemis/output/**/*', allowEmptyArchive :true, fingerprint: true
            junit testResults: 'artemis/*.xml', allowEmptyResults: true
            archiveArtifacts artifacts: 'artemis/logs', allowEmptyArchive :true
        }
        success { echo 'Job is successful, HO YEAH !' }
        failure {
            withCredentials([string(credentialsId: 'navitia_core_team_slack_chan', variable: 'NAVITIA_CORE_TEAM_SLACK_CHAN')]) {
                sh '''
                    curl -X POST -H 'Content-type: application/json' --data '{"text":":warning: Artemis failed. See https://jenkins-core.canaltp.fr/job/artemis_old/"}' $NAVITIA_CORE_TEAM_SLACK_CHAN
                '''
            }
        }
        cleanup {
            cleanWs()
        }
    }
}
